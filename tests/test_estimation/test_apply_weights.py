"""Tests for function in apply_weights"""
import pandas as pd
import numpy as np
import src.estimation.apply_weights as appw
from pandas._testing import assert_frame_equal


class TestApplyWeights():
    """Test for apply_weights"""
    # Tests that estimation cols are created, correctly calculated and rounded
    # Includes a np.nan and 0
    # Tests the cols_list output is correct


    # Create config dictionary
    def create_config_dict(self):
        config = {"estimation": {"numeric_cols": ["701", "702", "703"]},
                  "breakdowns": {"211": ["202", "203", "204"],
                                 "305": ["302", "303", "304"],
                                 "emp_total": ["emp_researcher", "emp_technician", "emp_other"],
                                 "headcount_total": ["headcount_res_m", "headcount_res_f", "headcount_tec_m",
                                                     "headcount_tec_f", "headcount_oth_m", "headcount_oth_f"]}
                                                 }
        return config

    # Create an input dataframe for the test
    def create_input_df(self):
        input_columns = [
            "reference",
            "701",
            "702",
            "703",
            "211",
            "202",
            "203",
            "204",
            "305",
            "302",
            "303",
            "304",
            "emp_total",
            "emp_researcher",
            "emp_technician",
            "emp_other",
            "headcount_total",
            "headcount_tot_m",
            "headcount_tot_f",
            "headcount_res_m",
            "headcount_res_f",
            "headcount_tec_m",
            "headcount_tec_f",
            "headcount_oth_m",
            "headcount_oth_f",
            "a_weight",
        ]

        data = [
            ["1", np.nan, 1.5968726069999999, 0.254832457, 1501.531337, 500.8443931, 499.9360421, 500.75090159999996, 29.94531777, 9.602584921, 9.653985014, 10.68874783, 6.486029315, 2.533542905, 2.308242877, 1.644243533, 35.5, 17.6, 17.9, 5.2, 5.0, 5.9, 6.1, 6.4, 6.8, 2.5],
            ["2", 0.0, 0.484444627, 0.660795649, 1501.150221, 499.7596024, 501.6974991, 499.6931194, 31.82855842, 10.97246129, 10.18047899, 10.67561814, 9.256449084, 3.6957475310000003, 3.053765916, 2.5069356369999998, 31.3, 15.6, 15.7, 5.1, 5.0, 5.2, 5.3, 5.3, 5.4, 6.0],
            ["3", 0.245754563, 0.053153144000000006, 0.24898895399999998, 1499.305683, 499.0019342, 499.56546389999994, 500.7382846, 31.09016923, 10.200109300000001, 11.24314965, 9.646910282999999, 11.18471882, 5.38607754, 2.750773441, 3.047867843, 31.9, 16.2, 15.7, 5.9, 5.8, 5.4, 5.2, 5.0, 4.7, 7.0],
            ["4", 0.091581569, 1.29306045, 2.222550393, 1497.3095039999998, 500.2853801, 498.26926339999994, 498.7548608, 31.49017978, 10.80040763, 9.527649379, 11.16212277, 10.22765186, 3.03791456, 3.8605661610000004, 3.3291711439999996, 19.5, 8.5, 11.0, 2.8, 4.8, 2.6, 3.2, 3.1, 3.0, 14.0],
            ["5", 0.48547690299999996, 0.614760438, 1.620874173, 1498.722371, 500.4694436000001, 500.44068089999996, 497.81224689999993, 30.44836156, 10.06357482, 10.79756546, 9.587221282, 8.654173735, 5.294000296, 2.062538336, 1.297635102, 38.7, 16.0, 22.7, 2.3, 5.6, 5.1, 7.2, 8.6, 10.0, 2.0],
            ["6", 0.216682565, 0.420119477, 0.077609457, 1497.974779, 499.146944, 498.292069, 500.5357663, 29.76051868, 9.465821929, 9.133324308999999, 11.16137244, 11.35927018, 5.351916919, 2.9535873489999998, 3.053765916, 29.9, 14.9, 15.0, 4.8, 4.7, 5.0, 5.0, 5.2, 5.3, 1.0],
            ["7", 0.256570729, 1.635266926, 0.877078037, 1497.8444539999998, 499.91778619999997, 499.7594455, 498.16722269999997, 28.24588485, 9.099873094, 9.312124146, 9.833887614, 11.20396942, 4.079138201, 5.134802344, 1.990028871, 27.8, 15.0, 12.8, 5.4, 4.0, 5.1, 4.6, 4.4, 4.3, 6.3],
            ["8", 0.733170964, 0.111266445, 0.506586275, 1500.596397, 501.64230189999995, 501.381718, 497.5723767, 28.169746500000002, 9.444435161, 9.593212578, 9.132098765, 10.80790153, 3.316276783, 4.322564458, 3.169060286, 34.8, 15.9, 18.9, 5.2, 7.6, 5.0, 5.8, 5.7, 5.6, 8.1],
            ["9", 2.134056558, 0.31692025, 1.3120006770000001, 1498.986525, 501.01687419999996, 499.2999597, 498.66969119999993, 31.76279059, 10.04786784, 10.48995616, 11.22496658, 8.855932629, 4.065679953, 2.443454044, 2.346798631, 33.1, 16.4, 16.8, 5.3, 5.5, 5.4, 5.6, 5.6, 5.7, 1.0],
            ["10", 0.678504648, 0.35838638700000003, 0.569093572, 1498.674708, 500.2971126, 500.64281950000003, 497.7347761, 30.178638399999997, 9.173285232000001, 11.11531108, 9.890042091, 10.35101118, 3.143504622, 3.1301464180000003, 4.077360139, 31.8, 15.6, 16.2, 4.3, 4.1, 5.3, 5.5, 6.0, 6.5, 9.0],
        ]

        input_df = pd.DataFrame(data=data, columns=input_columns)
        return input_df, input_columns

    # Create an expected dataframe for the test
    def create_expected_output(self):
        exp_output_columns = [
            "reference",
            "701",
            "702",
            "703",
            "211",
            "202",
            "203",
            "204",
            "305",
            "302",
            "303",
            "304",
            "emp_total",
            "emp_researcher",
            "emp_technician",
            "emp_other",
            "headcount_total",
            "headcount_tot_m",
            "headcount_tot_f",
            "headcount_res_m",
            "headcount_res_f",
            "headcount_tec_m",
            "headcount_tec_f",
            "headcount_oth_m",
            "headcount_oth_f",
            "a_weight",
            "701_estimated",
            "702_estimated",
            "703_estimated",
            "211_estimated",
            "202_estimated",
            "203_estimated",
            "204_estimated",
            "305_estimated",
            "302_estimated",
            "303_estimated",
            "304_estimated",
            "emp_total_estimated",
            "emp_researcher_estimated",
            "emp_technician_estimated",
            "emp_other_estimated",
            "headcount_total_estimated",
            "headcount_tot_m_estimated",
            "headcount_tot_f_estimated",
            "headcount_res_m_estimated",
            "headcount_res_f_estimated",
            "headcount_tec_m_estimated",
            "headcount_tec_f_estimated",
            "headcount_oth_m_estimated",
            "headcount_oth_f_estimated",
        ]

        data = [
            ["1", np.nan, 1.5968726069999999, 0.254832457, 1501.531337, 500.8443931, 499.9360421, 500.75090159999996, 29.94531777, 9.602584921, 9.653985014, 10.68874783, 6.486029315, 2.533542905, 2.308242877, 1.644243533, 35.5, 17.6, 17.9, 5.2, 5.0, 5.9, 6.1, 6.4, 6.8, 2.5, np.nan, 3.9922, 0.6371, 3753.8283, 1252.111, 1249.8401, 1251.8773, 74.8633, 24.0065, 24.135, 26.7219, 16.2151, 6.3339, 5.7706, 4.1106, 88.78, 44.04, 44.74, 13.11, 12.56, 14.84, 15.23, 16.09, 16.96],
            ["2", 0.0, 0.484444627, 0.660795649, 1501.150221, 499.7596024, 501.6974991, 499.6931194, 31.82855842, 10.97246129, 10.18047899, 10.67561814, 9.256449084, 3.6957475310000003, 3.053765916, 2.5069356369999998, 31.3, 15.6, 15.7, 5.1, 5.0, 5.2, 5.3, 5.3, 5.4, 6.0, 0.0, 2.9067, 3.9648, 9006.9013, 2998.5576, 3010.185, 2998.1587, 190.9714, 65.8348, 61.0829, 64.0537, 55.5387, 22.1745, 18.3226, 15.0416, 188.0, 93.77, 94.23, 30.44, 30.23, 31.33, 31.55, 32.0, 32.44],
            ["3", 0.245754563, 0.053153144000000006, 0.24898895399999998, 1499.305683, 499.0019342, 499.56546389999994, 500.7382846, 31.09016923, 10.200109300000001, 11.24314965, 9.646910282999999, 11.18471882, 5.38607754, 2.750773441, 3.047867843, 31.9, 16.2, 15.7, 5.9, 5.8, 5.4, 5.2, 5.0, 4.7, 7.0, 1.7203, 0.3721, 1.7429, 10495.1398, 3493.0135, 3496.9582, 3505.1679999999997, 217.6312, 71.4008, 78.702, 67.5284, 78.293, 37.7025, 19.2554, 21.3351, 223.37, 113.33, 110.03, 40.98, 40.59, 37.63, 36.39, 34.72, 33.05],
            ["4", 0.091581569, 1.29306045, 2.222550393, 1497.3095039999998, 500.2853801, 498.26926339999994, 498.7548608, 31.49017978, 10.80040763, 9.527649379, 11.16212277, 10.22765186, 3.03791456, 3.8605661610000004, 3.3291711439999996, 19.5, 8.5, 11.0, 2.8, 4.8, 2.6, 3.2, 3.1, 3.0, 14.0, 1.2821, 18.1028, 31.1157, 20962.3331, 7003.9953, 6975.7697, 6982.5681, 440.8625, 151.2057, 133.3871, 156.2697, 143.1871, 42.5308, 54.0479, 46.6084, 272.46, 118.55, 153.91, 39.34, 67.83, 36.17, 44.62, 43.04, 41.46],
            ["5", 0.48547690299999996, 0.614760438, 1.620874173, 1498.722371, 500.4694436000001, 500.44068089999996, 497.81224689999993, 30.44836156, 10.06357482, 10.79756546, 9.587221282, 8.654173735, 5.294000296, 2.062538336, 1.297635102, 38.7, 16.0, 22.7, 2.3, 5.6, 5.1, 7.2, 8.6, 10.0, 2.0, 0.971, 1.2295, 3.2417, 2997.4447, 1000.9389, 1000.8814, 995.6245, 60.8967, 20.1271, 21.5951, 19.1744, 17.3083, 10.588, 4.1251, 2.5953, 77.47, 32.06, 45.41, 4.64, 11.13, 10.28, 14.32, 17.14, 19.96],
            ["6", 0.216682565, 0.420119477, 0.077609457, 1497.974779, 499.146944, 498.292069, 500.5357663, 29.76051868, 9.465821929, 9.133324308999999, 11.16137244, 11.35927018, 5.351916919, 2.9535873489999998, 3.053765916, 29.9, 14.9, 15.0, 4.8, 4.7, 5.0, 5.0, 5.2, 5.3, 1.0, 0.2167, 0.4201, 0.0776, 1497.9748, 499.1469, 498.2921, 500.5358, 29.7605, 9.4658, 9.1333, 11.1614, 11.3593, 5.3519, 2.9536, 3.0538, 29.89, 14.89, 15.01, 4.75, 4.7, 4.98, 5.04, 5.15, 5.27],
            ["7", 0.256570729, 1.635266926, 0.877078037, 1497.8444539999998, 499.91778619999997, 499.7594455, 498.16722269999997, 28.24588485, 9.099873094, 9.312124146, 9.833887614, 11.20396942, 4.079138201, 5.134802344, 1.990028871, 27.8, 15.0, 12.8, 5.4, 4.0, 5.1, 4.6, 4.4, 4.3, 6.3, 1.6164, 10.3022, 5.5256, 9436.4201, 3149.4821, 3148.4845, 3138.4535, 177.9491, 57.3292, 58.6664, 61.9535, 70.585, 25.6986, 32.3493, 12.5372, 175.25, 94.52, 80.73, 34.26, 25.06, 32.43, 28.75, 27.84, 26.92],
            ["8", 0.733170964, 0.111266445, 0.506586275, 1500.596397, 501.64230189999995, 501.381718, 497.5723767, 28.169746500000002, 9.444435161, 9.593212578, 9.132098765, 10.80790153, 3.316276783, 4.322564458, 3.169060286, 34.8, 15.9, 18.9, 5.2, 7.6, 5.0, 5.8, 5.7, 5.6, 8.1, 5.9387, 0.9013, 4.1033, 12154.8308, 4063.3026, 4061.1919, 4030.3363, 228.1749, 76.4999, 77.705, 73.97, 87.544, 26.8618, 35.0128, 25.6694, 282.04, 128.61, 153.43, 41.83, 61.18, 40.65, 46.71, 46.12, 45.54],
            ["9", 2.134056558, 0.31692025, 1.3120006770000001, 1498.986525, 501.01687419999996, 499.2999597, 498.66969119999993, 31.76279059, 10.04786784, 10.48995616, 11.22496658, 8.855932629, 4.065679953, 2.443454044, 2.346798631, 33.1, 16.4, 16.8, 5.3, 5.5, 5.4, 5.6, 5.6, 5.7, 1.0, 2.1341, 0.3169, 1.3119999999999998, 1498.9865, 501.0169, 499.3, 498.6697, 31.7628, 10.0479, 10.49, 11.225, 8.8559, 4.0657, 2.4435, 2.3468, 33.13, 16.35, 16.78, 5.29, 5.53, 5.43, 5.56, 5.63, 5.7],
            ["10", 0.678504648, 0.35838638700000003, 0.569093572, 1498.674708, 500.2971126, 500.64281950000003, 497.7347761, 30.178638399999997, 9.173285232000001, 11.11531108, 9.890042091, 10.35101118, 3.143504622, 3.1301464180000003, 4.077360139, 31.8, 15.6, 16.2, 4.3, 4.1, 5.3, 5.5, 6.0, 6.5, 9.0, 6.1065, 3.2255, 5.1218, 13488.0724, 4502.674, 4505.7854, 4479.613, 271.6077, 82.5596, 100.0378, 89.0104, 93.1591, 28.2915, 28.1713, 36.6962, 286.0, 140.3, 145.7, 38.61, 37.17, 47.42, 49.87, 54.27, 58.67],
        ]

        exp_output_df = pd.DataFrame(data=data, columns=exp_output_columns)
        return exp_output_df

    def test_apply_weights(self):

        config = self.create_config_dict()
        input_df, input_columns = self.create_input_df()
        exp_output_df = self.create_expected_output()

        result_df, cols_list = appw.apply_weights(input_df, config, 4)

        input_columns.remove("reference"); input_columns.remove("a_weight")

        assert_frame_equal(result_df, exp_output_df, check_like=True, check_exact=False, rtol=0.05)
        assert sorted(cols_list) == sorted(input_columns), "input column list and returned column list are not equal"
